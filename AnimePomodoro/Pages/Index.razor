@page "/"
@using System.Threading
<h1>Index.razor</h1>

<h1>Counter</h1>

<p>Pomodoro time: @pomodoroTime</p>

<button class="btn btn-primary" @onclick="@(async () => await StartPomodoro())">Start Pomodoro</button>
<button class="btn btn-primary" @onclick="ResetTimer">Reset Timer</button>
<button class="btn btn-primary" @onclick="PausePomodoro">Pause Pomodoro</button>
<button class="btn btn-primary" @onclick="StartPomodoro">Resume Pomodoro</button>

@*<button class="btn btn-primary" @onclick="SetTimer(3)">Set timer 3</button>*@

@code {
    private bool pomodoroPause = true;
    TimeSpan pomodoroTime = TimeSpan.FromMinutes(25);
    private bool countPomodoroRuning = false;

    private CancellationTokenSource cts;

    public void ResetTimer()
    {
        PausePomodoro();
        pomodoroTime = TimeSpan.FromMinutes(25);
    }
    public void PausePomodoro()
    {
        pomodoroPause = true;
        cts.Cancel();
        cts.Dispose();
        Console.WriteLine("Paused");
    }

    public async Task StartPomodoro()
    {
        if (pomodoroPause)
        {
            cts = new CancellationTokenSource();
            pomodoroPause = false;
            Console.WriteLine("Started");
            await CountPomodoro(cts.Token);
            Console.WriteLine("Ended");
        }
    }

    private async Task CountPomodoro(CancellationToken cToken)
    {
        while (pomodoroTime > TimeSpan.FromSeconds(0))
        {
            await Task.Delay(1000, cToken);
            cToken.ThrowIfCancellationRequested();

            pomodoroTime = pomodoroTime - TimeSpan.FromSeconds(1);
            this.StateHasChanged();
            Console.WriteLine(pomodoroTime);
        }
    }

}

