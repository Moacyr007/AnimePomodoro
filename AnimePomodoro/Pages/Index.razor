@page "/"
@using System.Threading
<h1>Index.razor</h1>

<button class="btn btn-primary" @onclick="@(() => SetTimer(25))">Pomodoro</button>
<button class="btn btn-primary" @onclick="@(() => SetTimer(5))">Short Break</button>
<button class="btn btn-primary" @onclick="@(() => SetTimer(10))">Long Break</button>


<h1>@outputPomodoroTime</h1>

<p>Pomodoro count: @pomodoroCount</p>

<button class="btn btn-primary" @onclick="@(async () => await StartPomodoro())">Start Pomodoro</button>
<button class="btn btn-primary" @onclick="PausePomodoro">Pause Pomodoro</button>

<p>@message</p>


@*<button class="btn btn-primary" @onclick="SetTimer(3)">Set timer 3</button>*@

@code {
    private bool pomodoroPause = true;
    TimeSpan pomodoroTime = TimeSpan.FromMinutes(25);
    private int pomodoroCount = 0;
    private string counterType = "";
    private string message = "";
    private string outputPomodoroTime = "25:00";

    private CancellationTokenSource cts;

    public void SetTimer(int value)
    {
        if (value == 5)
        {
            counterType = "Short Break";
        }else if(value == 10){
            counterType = "Long Break";
        }
        else
        {
            counterType = "Pomodoro";
        }

        message = "";
        PausePomodoro();
        pomodoroTime = TimeSpan.FromMinutes(value);
        outputPomodoroTime = $"{(int)pomodoroTime.TotalMinutes}:{pomodoroTime.Seconds:00}";
        this.StateHasChanged();
    }
    public void PausePomodoro()
    {
        if (!pomodoroPause)
        {
            pomodoroPause = true;
            cts.Cancel();
            cts.Dispose();
            Console.WriteLine("Paused");
        }
        Console.WriteLine("Already Paused");
    }

    public async Task StartPomodoro()
    {
        if (pomodoroPause)
        {
            cts = new CancellationTokenSource();
            pomodoroPause = false;
            Console.WriteLine("Started");
            await CountPomodoro(cts.Token);
            Console.WriteLine("Ended");
        }
    }

    private async Task CountPomodoro(CancellationToken cToken)
    {
        if (pomodoroTime > TimeSpan.FromSeconds(0))
        {
            while (pomodoroTime > TimeSpan.FromSeconds(0))
            {
                await Task.Delay(1000, cToken);
                cToken.ThrowIfCancellationRequested();
                pomodoroTime = pomodoroTime - TimeSpan.FromSeconds(1);
                outputPomodoroTime = $"{(int)pomodoroTime.TotalMinutes}:{pomodoroTime.Seconds:00}";
                this.StateHasChanged();
                Console.WriteLine(pomodoroTime);
            }
            if (counterType == "Pomodoro") { pomodoroCount++; };
            message = ("Your " + counterType + " was end");
            this.StateHasChanged();
            counterType = "";
        }
    }

}

