@page "/"
@using System.Threading
@inject IJSRuntime _jsRuntime;

<div class="content">
    <button class="btn btn-primary" @onclick="@(() => SetTimer(25))">Pomodoro</button>
    <button class="btn btn-primary" @onclick="@(() => SetTimer(5))">Short Break</button>
    <button class="btn btn-primary" @onclick="@(() => SetTimer(10))">Long Break</button>


    <h1 class="pomodoroTime">@_outputPomodoroTime</h1>

    <p>Pomodoro count: @_pomodoroCount</p>

    <button class="btn btn-primary" @onclick="@(async () => await StartPomodoro())">Start</button>
    <button class="btn btn-primary" @onclick="PausePomodoro">Pause</button>

    <p>@_message</p>

    <img class="animeGirlImage" src="assets/images/teenage-girl-anime-character.jpg" alt="teenage-girl-anime-character" />
</div>

<div class="footer">
    <p>Developed by <a href="https://www.linkedin.com/in/moacyr-pinheiro-278686110/">Moacyr Pinheiro</a></p>
    <p>Anime girl from <a href="https://www.publicdomainpictures.net/en/view-image.php?image=58272&picture=teenage-girl-anime-character">Karen Arnold</a></p>

    @if (_playAlarm)
    {
        <embed src="/assets/audio/Alarm.mp3" autostart="false" type="audio/mpeg" loop="false" width="0" height="0" id="beep" enablejavascript="true" />
    }
</div>



@code {

    bool _playAlarm = false;
    
    private bool _pomodoroPause = true;
    TimeSpan _pomodoroTime = TimeSpan.FromMinutes(25);
    private int _pomodoroCount = 0;
    private string _counterType = "";
    private string _message = "";
    private string _outputPomodoroTime = "25:00";
    private DateTime _startTime = DateTime.Now;
    private DateTime _pousedTime;

    private CancellationTokenSource _cts;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("setTitle", _outputPomodoroTime);
    }

    public void SetTimer(int value)
    {
        if (value == 5)
        {
            _counterType = "Short Break";
        }
        else if (value == 10)
        {
            _counterType = "Long Break";
        }
        else
        {
            _counterType = "Pomodoro";
        }

        _message = "";
        PausePomodoro();
        _startTime = DateTime.Now;
        _pomodoroTime = TimeSpan.FromMinutes(value);
        //_outputPomodoroTime = $"{(int)_pomodoroTime.TotalMinutes}:{_pomodoroTime.Seconds:00}";
        _outputPomodoroTime = (_startTime - DateTime.Now).ToString();
        _playAlarm = false;
        StateHasChanged();
    }
    public void PausePomodoro()
    {
        if (!_pomodoroPause)
        {
            _pomodoroPause = true;
            _cts.Cancel();
            _cts.Dispose();
            Console.WriteLine("Paused");
        }
        Console.WriteLine("Already Paused");
    }

    public async Task StartPomodoro()
    {
        if (_pomodoroPause)
        {
            _cts = new CancellationTokenSource();
            _pomodoroPause = false;
            Console.WriteLine("Started");
            await CountPomodoro(_cts.Token);
            Console.WriteLine("Ended");
        }
    }

    private async Task CountPomodoro(CancellationToken cToken)
    {
        if (_pomodoroTime > TimeSpan.FromSeconds(0))
        {
            while (_pomodoroTime > TimeSpan.FromSeconds(0))
            {
                await Task.Delay(100, cToken);
                cToken.ThrowIfCancellationRequested();
                _pomodoroTime = _pomodoroTime - TimeSpan.FromSeconds(1);
                _outputPomodoroTime = (_startTime - DateTime.Now).ToString(); // $"{(int)_pomodoroTime.TotalMinutes}:{_pomodoroTime.Seconds:00}";

                StateHasChanged();
                Console.WriteLine("Pomodoro:" + _pomodoroTime);
                Console.WriteLine(DateTime.Now.ToString("h:mm:ss tt"));
            }
            if (_counterType == "Pomodoro") { _pomodoroCount++; };
            _playAlarm = true;
            _message = ("Your " + _counterType + " was end");
            StateHasChanged();
            _counterType = "";
        }
    }

}
