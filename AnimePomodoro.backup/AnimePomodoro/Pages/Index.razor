@page "/"
@using System.Threading
@inject IJSRuntime JSRuntime;

<div class="content">
    <button class="btn btn-primary" @onclick="@(() => SetTimer(25))">Pomodoro</button>
    <button class="btn btn-primary" @onclick="@(() => SetTimer(5))">Short Break</button>
    <button class="btn btn-primary" @onclick="@(() => SetTimer(10))">Long Break</button>


    <h1 class="pomodoroTime">@outputPomodoroTime</h1>

    <p>Pomodoro count: @pomodoroCount</p>

    <button class="btn btn-primary" @onclick="@(async () => await StartPomodoro())">Start</button>
    <button class="btn btn-primary" @onclick="PausePomodoro">Pause</button>

    <p>@message</p>

    <img class="animeGirlImage" src="assets/images/teenage-girl-anime-character.jpg" alt="teenage-girl-anime-character" />
</div>

<div class="footer">
    <p>Developed by <a href="https://www.linkedin.com/in/moacyr-pinheiro-278686110/">Moacyr Pinheiro</a></p>
    <p>Anime girl from <a href="https://www.publicdomainpictures.net/en/view-image.php?image=58272&picture=teenage-girl-anime-character">Karen Arnold</a></p>

    @if (playAlarm)
    {
        <embed src="/assets/audio/Alarm.mp3" autostart="false" type="audio/mpeg" loop="false" width="0" height="0" id="beep" enablejavascript="true" />
    }
</div>



@code {


    bool playAlarm = false;


    private bool pomodoroPause = true;
    TimeSpan pomodoroTime = TimeSpan.FromMinutes(25);
    private int pomodoroCount = 0;
    private string counterType = "";
    private string message = "";
    private string outputPomodoroTime = "25:00";

    private CancellationTokenSource cts;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", outputPomodoroTime);
    }

    public void SetTimer(int value)
    {
        if (value == 5)
        {
            counterType = "Short Break";
        }
        else if (value == 10)
        {
            counterType = "Long Break";
        }
        else
        {
            counterType = "Pomodoro";
        }

        message = "";
        PausePomodoro();
        pomodoroTime = TimeSpan.FromMinutes(value);
        outputPomodoroTime = $"{(int)pomodoroTime.TotalMinutes}:{pomodoroTime.Seconds:00}";
        playAlarm = false;
        this.StateHasChanged();
    }
    public void PausePomodoro()
    {
        if (!pomodoroPause)
        {
            pomodoroPause = true;
            cts.Cancel();
            cts.Dispose();
            Console.WriteLine("Paused");
        }
        Console.WriteLine("Already Paused");
    }

    public async Task StartPomodoro()
    {
        if (pomodoroPause)
        {
            cts = new CancellationTokenSource();
            pomodoroPause = false;
            Console.WriteLine("Started");
            await CountPomodoro(cts.Token);
            Console.WriteLine("Ended");
        }
    }


    private async Task CountPomodoro(CancellationToken cToken)
    {
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        if (pomodoroTime > TimeSpan.FromSeconds(0))
        {
            while (pomodoroTime > TimeSpan.FromSeconds(0))
            {
                while (await timer.WaitForNextTickAsync(cToken) && !cToken.IsCancellationRequested)
                {
                    pomodoroTime -= TimeSpan.FromSeconds(1);
                    outputPomodoroTime = $"{(int)pomodoroTime.TotalMinutes}:{pomodoroTime.Seconds:00}";
            
                    StateHasChanged();
                    Console.WriteLine("Pomodoro:" + pomodoroTime);
                    Console.WriteLine(DateTime.Now.ToString("h:mm:ss tt"));
                }
                 
                cToken.ThrowIfCancellationRequested();
            }
            
            if (counterType == "Pomodoro") { pomodoroCount++; };
            playAlarm = true;
            message = ("Your " + counterType + " was end");
            StateHasChanged();
            counterType = "";
        }
    }

}
